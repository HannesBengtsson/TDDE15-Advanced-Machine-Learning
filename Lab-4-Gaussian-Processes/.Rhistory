# Install and import necessary packages for the lab
library(kernlab)
library(ggplot2)
library(AtmRay)
# Squared exponential kernel function
SEkernel <- function(x1, x2, sigmaf = 1, l = 1) {
n1 <- length(x1)
n2 <- length(x2)
K <- matrix(NA, n1, n2)
for (i in 1:n2) {
K[, i] <- sigmaf ^ 2 * exp(-0.5 * ((x1 - x2[i]) / l) ^ 2)
}
return(K)
}
# Function simulating the posterior distribution of f
posteriorGP <- function (x, y, xStar, sigmaNoise, k, ...) {
# Number of observations
n <- length(x)
# Calculate the covariance matrices:
# k(X, X), k(X, X*), k(X*, X*)
K <- k(x, x, ...)
KStar <- k(x, xStar, ...)
KStarStar <- k(xStar, xStar, ...)
# Calculate the lower triangular matrix L
L <- t(chol(K + (sigmaNoise ^ 2) * diag(n)))
# Calculate alpha
alpha <- solve(t(L), solve(L, y))
# Calculate the posterior mean for f
f_mean <- t(KStar) %*% alpha
# Compute the posterior covariance matrix of f
v <- solve(L, KStar)
f_cov <- KStarStar - t(v) %*% v
# The diagonal in the covariance matrix gives us the variance
f_var <- diag(f_cov)
# Return a vector with the posterior mean and variance of f
return(list(Mean=f_mean[,1], Variance=f_var))
}
# Simulating some data
obs <- data.frame(x = 0.4, y = 0.719)
sigmaf <- 1
ell <- 0.3
sigmaNoise <- 0.1
x_interval <- seq(-1,1,length=100)
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf=sigmaf,
l = ell)
# A function to plot our posterior mean with 95% probability bands
plot_post_mean <- function(mean, variance, interval, observations) {
# 95% probability bands for f corresponds to 1.96 standard deviations
prob_bands <-  list (upper = mean + 1.96 * sqrt(variance),
lower = mean - 1.96 * sqrt(variance))
# Set ylim so that we include our probability bands
ylim <- c(min(prob_bands$lower) - 1,
max(prob_bands$upper) + 1)
# Plot the mean
plot(x = interval,
y = mean,
type = 'l',
col = 'black',
ylab = 'Posterior mean',
xlab = "Interval",
ylim = ylim)
# Draw the probability bands on the plot
lines(x = interval,
y = prob_bands$upper,
col = "blue",
lwd = 2)
lines(x = interval,
y = prob_bands$lower,
col = "blue",
lwd = 2)
# Add our observations
points(x = observations$x,
y = observations$y,
col = "black",
pch = 16)
# Add legend
legend('topright',
legend = c("Mean of f", "95% PB", "Observations"),
col = c("black", "blue", "black"),
lty = c(1, 1, NA),
lwd = c(1,2, NA),
pch = c(NA, NA, 16))
}
# Update with 2 observations
obs <- data.frame(x = c(0.4,-0.6), y = c(0.719,-0.044))
# Get the posterior mean and variance of f
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf = sigmaf,
l = ell)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Update with 5 observations
obs <- data.frame(x = c(-1.0,-0.6,-0.2,0.4,0.8),
y = c(0.768,-0.044,-0.940,0.719,-0.664))
# Get the posterior mean and variance of f
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf = sigmaf,
l = ell)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Get the posterior mean and variance of f
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf = sigmaf,
l = 0.2)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Update parameters
sigmaf <- 1
ell <- 1
# Get the posterior mean and variance of f
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf = sigmaf,
l = ell)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
df <-  read.csv("https://github.com/STIMALiU/AdvMLCourse/raw/master/GaussianProcess/Code/TempTullinge.csv", header=TRUE, sep=";")
# Create the variable time which records the day number since the start of the dataset
time <- seq(1,2190,1)
# Create the variable day that records the day number since the start of each year
day <- c(rep(seq(1,365,1),6))
# Get every fifth time and day
observations <- data.frame(temp = df$temp[time[seq(1, length(time), by = 5)]],
time = time[seq(1, length(time), by = 5)],
day = day[seq(1, length(day), by = 5)])
# Squared exponential kernel function
SEkernel_nestled <- function(sigmaf = 1, ell = 1)
{
rval <- function(x1, x2 = NULL) {
return(sigmaf^2*exp(-(x1-x2)^2/(2*ell^2)))
}
class(rval) <- "kernel"
return(rval)
}
SEkernelFunc <- SEkernel_nestled(sigmaf = 1, ell = 1) # A kernel FUNCTION.
SEkernelFunc(c(1,1),c(2,2)) # Evaluating the kernel in x=c(1,1), x'=c(2,2).
# Testing our own defined kernel function.
X <- matrix(c(1,3,4)) # Simulating some data.
Xstar <- matrix(c(2,3,4))
# Computing the whole covariance matrix K from the kernel.
kernelMatrix(kernel = SEkernelFunc, x = X, y = Xstar) # So this is K(X,Xstar).
```
data <- read.csv("https://github.com/STIMALiU/AdvMLCourse/raw/master/GaussianProcess/Code/banknoteFraud.csv",
header=FALSE, sep=",")
names(data) <- c("varWave","skewWave","kurtWave","entropyWave","fraud")
data[,5] <- as.factor(data[,5])
set.seed(111);
SelectTraining <- sample(1:dim(data)[1], size = 1000, replace = FALSE)
train <- data[SelectTraining,]
val <- data[-SelectTraining,]
GPfitfraud <- gausspr(fraud ~  varWave + skewWave, data=train)
x1 <- seq(min(train$varWave),max(train$varWave),length=100)
x2 <- seq(min(train$skewWave),max(train$skewWave),length=100)
gridPoints <- meshgrid(x1, x2)
gridPoints <- cbind(c(gridPoints$x), c(gridPoints$y))
gridPoints <- data.frame(gridPoints)
names(gridPoints) <- names(train[1:2])
probPreds <- predict(GPfitfraud, gridPoints, type="probabilities")
# Plotting
contour(x1,x2,matrix(probPreds[,2],100,byrow = TRUE), 20, xlab = "varWave", ylab = "skewWave", main = "Countor Plot Fraud")
points(train[train[,5]==1,1],train[train[,5]==1,2],col="blue")
points(train[train[,5]==0,1],train[train[,5]==0,2],col="red")
# Accuracy function
accuracy <- function(X,X1){
n <- length(X)
return(sum(diag(table(X,X1)))/n)
}
# Confusion matrix for the training data
pred <- predict(GPfitfraud, newdata=train)
table(pred, train$fraud)
accuracy(pred, train$fraud) # Accuracy
# A function to plot our posterior mean with 95% probability bands
plot_post_mean <- function(mean, variance, interval, observations) {
# 95% probability bands for f corresponds to 1.96 standard deviations
prob_bands <-  list (upper = mean + 1.96 * sqrt(variance),
lower = mean - 1.96 * sqrt(variance))
# Set ylim so that we include our probability bands
ylim <- c(min(prob_bands$lower) - 1,
max(prob_bands$upper) + 1)
# Plot the mean
plot(x = interval,
y = mean,
type = 'l',
col = 'black',
ylab = 'Posterior mean',
xlab = "Interval",
ylim = ylim)
# Draw the probability bands on the plot
lines(x = interval,
y = prob_bands$upper,
col = "blue",
lwd = 2)
lines(x = interval,
y = prob_bands$lower,
col = "blue",
lwd = 2)
# Add our observations
points(x = observations$x,
y = observations$y,
col = "black",
pch = 16)
# Add legend
legend('topright',
legend = c("Mean of f", "95% PB", "Observations"),
col = c("black", "blue", "black"),
lty = c(1, 1, NA),
lwd = c(1,2, NA),
pch = c(NA, NA, 16),
cex = 0.5)
}
plot_post_mean(f_posterior$Mean, f_posterior$Variance,x_interval,obs)
# A function to plot our posterior mean with 95% probability bands
plot_post_mean <- function(mean, variance, interval, observations) {
# 95% probability bands for f corresponds to 1.96 standard deviations
prob_bands <-  list (upper = mean + 1.96 * sqrt(variance),
lower = mean - 1.96 * sqrt(variance))
# Set ylim so that we include our probability bands
ylim <- c(min(prob_bands$lower) - 1,
max(prob_bands$upper) + 1)
# Plot the mean
plot(x = interval,
y = mean,
type = 'l',
col = 'black',
ylab = 'Posterior mean',
xlab = "Interval",
ylim = ylim)
# Draw the probability bands on the plot
lines(x = interval,
y = prob_bands$upper,
col = "blue",
lwd = 2)
lines(x = interval,
y = prob_bands$lower,
col = "blue",
lwd = 2)
# Add our observations
points(x = observations$x,
y = observations$y,
col = "black",
pch = 16)
# Add legend
legend('topright',
legend = c("Mean of f", "95% PB", "Observations"),
col = c("black", "blue", "black"),
lty = c(1, 1, NA),
lwd = c(1,2, NA),
pch = c(NA, NA, 16),
cex = 0.8)
}
plot_post_mean(f_posterior$Mean, f_posterior$Variance,x_interval,obs)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
# Update with 2 observations
obs <- data.frame(x = c(0.4,-0.6), y = c(0.719,-0.044))
# Get the posterior mean and variance of f
f_posterior <- posteriorGP(x = obs$x,
y = obs$y,
xStar = x_interval,
sigmaNoise = sigmaNoise,
k = SEkernel,
sigmaf = sigmaf,
l = ell)
# Plot the posterior mean of f, observations, and 95% probability bands for f
plot_post_mean(f_posterior$Mean, f_posterior$Variance, x_interval, obs)
